{\rtf1\ansi \ansicpg1252{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green102\blue204;}{\fonttbl{\f0\froman\cpg0\fcharset0 Times New Roman;}{\f1\froman\cpg1252\fcharset0 Times New Roman;}{\f2\froman\cpg1251\fcharset204 Times New Roman;}{\f3\froman\cpg1250\fcharset238 Times New Roman;}{\f4\froman\cpg1257\fcharset186 Times New Roman;}{\f5\froman\cpg1254\fcharset162 Times New Roman;}{\f6\froman\cpg1253\fcharset161 Times New Roman;}{\f7\froman\cpg1255\fcharset177 Times New Roman;}{\f8\froman\cpg0\fcharset161 Times New Roman;}{\f9\froman\cpg1256\fcharset178 Times New Roman;}{\f10\froman\cpg874\fcharset222 Times New Roman;}{\f11\froman\cpg1258\fcharset163 Times New Roman;}{\f12\fmodern\cpg0\fcharset0 Courier New;}{\f13\fmodern\cpg1252\fcharset0 Courier New;}{\f14\fmodern\cpg1251\fcharset204 Courier New;}{\f15\fmodern\cpg1250\fcharset238 Courier New;}{\f16\fmodern\cpg1257\fcharset186 Courier New;}{\f17\fmodern\cpg1254\fcharset162 Courier New;}{\f18\fmodern\cpg1253\fcharset161 Courier New;}{\f19\fmodern\cpg1255\fcharset177 Courier New;}{\f20\fmodern\cpg0\fcharset161 Courier New;}{\f21\fmodern\cpg1256\fcharset178 Courier New;}{\f22\fmodern\cpg874\fcharset222 Courier New;}{\f23\fmodern\cpg1258\fcharset163 Courier New;}}{\stylesheet {\sbasedon222\f1\fs20 Normal;}}\paperw12240\paperh15840\margl984\margr1334\margt970\margb1973 \sectd \sbknone\pgwsxn12240\pghsxn15840\marglsxn984\margrsxn1334\margtsxn970\margbsxn1973\cols1\colsx60 \pard \plain \cbpat8\ql\li2798\fi0\ri0\sb0\sa269 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs34 Aspect Mining and Refactoring}\par \sect\sectd \sbknone\pgwsxn12240\pghsxn15840\marglsxn1339\margrsxn1680\margtsxn970\margbsxn1973\cols3\colno1\colw2740\colsr523\colno2\colw2688\colsr538\colno3\colw2731 \pard \plain \cbpat8\ql\li470\fi0\ri0\sb0\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw-3\dn0\f1\cchs0\lang1034\fs24 Arie\fs16  \fs24 van\fs16  \fs24 Deursen\b0\super\expndtw0\dbch\af13\loch\af12\hich\f12\cchs0\fs16 \u8727\'3f}\par \pard \plain \cbpat8\qc\li0\fi0\ri14\sb62\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Software EvolutionResearch Lab}\par \pard \plain \cbpat8\qc\li0\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 CWI&Delft Univ. of Technology}\par \pard \plain \cbpat8\qc\li5\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 The Netherlands}\par \pard \plain \cbpat8\qc\li0\fi0\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 {\field{\*\fldinst{HYPERLINK "mailto:Arie.van.Deursen@cwi.nl"}}{\fldrslt Arie.van.Deursen@cwi.nl}}}\par \column \pard \plain \cbpat8\ql\li619\fi0\ri0\sb0\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs24 Marius Marin}\par \pard \plain \cbpat8\qc\li0\fi0\ri0\sb53\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 Software Evolution Research Lab}\par \pard \plain \cbpat8\qc\li14\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Delft University of Technology}\par \pard \plain \cbpat8\qc\li19\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 The Netherlands}\par \pard \plain \cbpat8\qc\li5\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 {\field{\*\fldinst{HYPERLINK "mailto:A.M.Marin@ewi.tudelft.nl"}}{\fldrslt A.M.Marin@ewi.tudelft.nl}}}\par \column \pard \plain \cbpat8\ql\li662\fi0\ri0\sb0\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs24 Leon Moonen}\par \pard \plain \cbpat8\qc\li5\fi0\ri0\sb53\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 Software Evolution Research Lab}\par \pard \plain \cbpat8\qc\li0\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Delft Univ. of Technology&CWI}\par \pard \plain \cbpat8\qc\li19\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 The Netherlands}\par \pard \plain \cbpat8\qc\li19\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 {\field{\*\fldinst{HYPERLINK "mailto:Leon.Moonen@acm.org"}}{\fldrslt Leon.Moonen@acm.org}}}\par \sect\sectd \sbknone\pgwsxn12240\pghsxn15840\marglsxn984\margrsxn1334\margtsxn970\margbsxn1973\cols1\colsx60 {\pard\plain \sb504\sa0\sl-1\slmult0\fs2\par}\sect\sectd \sbknone\pgwsxn12240\pghsxn15840\marglsxn984\margrsxn1334\margtsxn970\margbsxn1973\cols2\colno1\colw4752\colsr442\colno2\colw4728 \pard \plain \cbpat8\qc\li10\fi0\ri0\sb0\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs24 Abstract}\par \pard \plain \cbpat8\qj\li24\fi0\ri10\sb120\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 In this paper we arg\loch\af0\hich\af0\dbch\f1\cchs0 \'fc\hich\af0\dbch\af1\loch\f0\cchs0 e for the needfor research in the \loch\af0\hich\af0\dbch\f1\cchs0 \'e1\hich\af0\dbch\af1\loch\f0\cchs0 rea \expndtw0 of aspect mining, covering concepts, principies, methods and tools supporting the identification ofaspects in object-\expndtw-1 oriented software systems as well as the subsequent refac\-\expndtw0 toring ofsuch systems in aspect-oriented systems.}\par \pard \plain \cbpat8\qj\li19\fi264\ri14\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 We give an overview of the state of the art in this \loch\af0\hich\af0\dbch\f1\cchs0 \'e1\hich\af0\dbch\af1\loch\f0\cchs0 rea \expndtw-2 which shows some ofthe research directions that have been \expndtw-1 considered up to now and describes ongoing efforts.}\par \pard \plain \cbpat8\qj\li0\fi264\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 We provide an initial assessment of how reverse engi-\expndtw0 neering and software exploration techniques can help in \expndtw-1 aspect mining, identify promising research directions and pose a number of research questions that could help to ad-\expndtw0 vance the state ofthe art in aspect mining and refactoring.}\par \pard \plain \cbpat8\ql\li38\fi0\ri0\sb278\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs28 1.    Introduction}\par \pard \plain \cbpat8\qj\li19\fi0\ri5\sb192\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Aspect-Oriented Programming \b0 In software engineer-\expndtw-2 ing, decomposing a large software system into smaller parts \expndtw0 is an essential way of managing the complexity and evo-lution of today\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s software systems. Such a decomposition results in a \loch\af0\hich\af0\dbch\f1\cchs0 \'93\hich\af0\dbch\af1\loch\f0\cchs0 separation of concerns\loch\af0\hich\af0\dbch\f1\cchs0 \'94\hich\af0\dbch\af1\loch\f0\cchs0 , and facilitates paral-\expndtw-1 lel work, team specialization, localized change, systematic testing and quality assurance, and work planning.}\par \pard \plain \cbpat8\qj\li10\fi226\ri10\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Unfortunately, certain behavior of software systems, such as error handling or logging, are inherently difficult to decompose and isolate, leading to reduced reliability \expndtw-2 and maintainability of these systems. \i Aspect-Oriented Pro\-\expndtw0 gramming \i0 (AOP) carne up in the 90s as a paradigm aimed at making such \i cross cutting concerns \i0 (or, more briefly \i aspects) \i0 explicit, and uses code generation techniques to \expndtw-1 weave aspects back into the application logic [7]. This sep\-aration solves the inherent problems of code scattering and \expndtw0 tangling in large object-oriented systems.}\par \pard \plain \cbpat8\qj\li24\fi240\ri19\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 Currently, as AOP is entering the innovation phase, new \expndtw-3 challenges arise while the technology becomes more largely \expndtw0 adopted and its practice extends.   The rel\loch\af0\hich\af0\dbch\f1\cchs0 \'e9\hich\af0\dbch\af1\loch\f0\cchs0 ase of aspect-}\par \pard \plain \cbpat8\qj\li19\fi216\ri29\sb149\sa0\sl-187\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw-3\dn0\f1\cchs0\lang1034\fs16 * \b0 A. van Deursen received partial support from SENTER, project Ide\loch\af0\hich\af0\dbch\f1\cchs0 \'e1\hich\af0\dbch\af1\loch\f0\cchs0 is, \expndtw-1 hosted by the Embedded Systems Institute, Eindhoven, The Netherlands.}\par \column \pard \plain \cbpat8\qj\li0\fi0\ri0\sb14\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 oriented development tools such as AspectJ\super 1\nosupersub , contributions by several research groups and the recent integration in ap-plication servers such as JBoss\super 2\nosupersub  and BEA\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s WebLogic\super 3\nosupersub  il-\expndtw0 lustrate the increasing popularity of AOP. \b Aspect Mining \b0 The topic of this paper is \i aspect mining \expndtw-2 and refactoring\i0 : the search for candidate aspects in existing object-oriented systems and isolating them from the system \expndtw0 into separately described aspects. The goal of migrating an object-oriented system into an aspect-oriented one in-\expndtw-2 cludes, amongst others, improving the comprehensibility of \expndtw0 the system, and thereby improving it\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s maintainability and extensibility (evolvability).}\par \pard \plain \cbpat8\qj\li0\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Moreover, in order to be convincing when arguing that AOP is an important step forward, a number of important \expndtw-2 questions need to be answered. One of them is investigating \expndtw-3 new cross-cutting concerns, other than the classical example \expndtw0 of logging, and ways for this to be done.}\par \pard \plain \cbpat8\qj\li0\fi235\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Additionally, a number of concerns regarding the use of AOP have been expressed, such as the risk of getting \expndtw-2\loch\af0\hich\af0\dbch\f1\cchs0 \'93\hich\af0\dbch\af1\loch\f0\cchs0 spaghetti code\loch\af0\hich\af0\dbch\f1\cchs0 \'94\hich\af0\dbch\af1\loch\f0\cchs0  and ad hoc design due to the improper use \expndtw0 of free-defined and unrestricted pointcuts. These concerns raise the question of \i when \i0 AOP is really needed and when \expndtw-3 OOP is enough for the right solution. We believe that aspect \expndtw0 mining can help in finding answers to these questions and others alike.}\par \pard \plain \cbpat8\qj\li0\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Software System Mining \b0 Software mining techniques aim at finding valuable information in the source code of \expndtw-2 a software system, in order to make this information explic-\expndtw-3 itly available to software engineers involved in the evolution \expndtw0 of that system. A typical software mining example is \i busi-ness rule extraction\i0 .}\par \pard \plain \cbpat8\qj\li0\fi235\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 Software system mining is supported by \i software explo-\expndtw-2 ration \i0 [10]. This typically involves three steps: (1) data col-lection from source code, (2) knowledge inference based on abstraction from the collected data, and (3) information pre-\expndtw0 sentation using, for example, hypertext and visualizations. \expndtw-1 In this paper, we provide an initial assessment of how soft\-\expndtw0 ware exploration techniques can help in aspect mining.}\par \pard \plain \cbpat8\ql\li331\fi0\ri0\sb154\sa0 \f1\fs20{\b0\i0\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs16 {\field{\*\fldinst{HYPERLINK "http://eclipse.org/aspectj/"}}{\fldrslt http://eclipse.org/aspectj/}}}\par \pard \plain \cbpat8\ql\li221\fi110\ri2304\sb38\sa0\sl-139\slmult0 \f1\fs20{\b0\i0\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs16 {\field{\*\fldinst{HYPERLINK "http://www.jboss.org/"}}{\fldrslt http://www.jboss.org/ }}\ul0\cf1\fs12 3}\par \pard \plain \cbpat8\ql\li326\fi0\ri0\sb0\sa0 \f1\fs20{\b0\i0\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs18 {\field{\*\fldinst{HYPERLINK "http://www.bea.com/"}}{\fldrslt http://www.bea.com/}}}\par \sect\sectd \sbknone\pgwsxn12240\pghsxn15840\marglsxn984\margrsxn1334\margtsxn970\margbsxn1973\cols1\colsx60 \pard \plain \cbpat8\ql\li4944\fi0\ri0\sb370\sa0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 1}\par \sect\sectd \sbkpage\pgwsxn12240\pghsxn15840\marglsxn1003\margrsxn1330\margtsxn451\margbsxn1896\cols2\colno1\colw4723\colsr182\colno2\colw5001 \pard \plain \cbpat8\qj\li0\fi0\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Refactoring \b0 A refactoring is a change made to the inter-\expndtw-2 nal structure of software to make it easier to understand and \expndtw0 cheaper to modify without changing its observable behav-\expndtw-2 ior. Refactorings are systematically organized into catalogs, \expndtw-1 in a similar way as design patterns. Hints that certain refac-\expndtw-3 torings are applicable are provided by so-called \i code smells\i0 : \expndtw0 suspicious code parts that require improvement. \b Position Statement \b0 In this paper, we argue for the need \expndtw-3 for research in the area of aspect mining, covering concepts, \expndtw0 principles, methods and tools supporting the identification \expndtw-2 of aspects in object-oriented software systems as well as the subsequent refactoring of such systems into aspect-oriented \expndtw0 systems.}\par \pard \plain \cbpat8\ql\li0\fi0\ri0\sb264\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs28 2.   State of the Art}\par \pard \plain \cbpat8\qj\li0\fi0\ri5\sb187\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 To date, a number of research groups are working in the \expndtw-1 area of aspect mining. Here we summarize the main results \expndtw0 and ongoing efforts.}\par \pard \plain \cbpat8\qj\li0\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 The identification of aspects first of all requires a clear idea of where aspects can be found. As such, the study of general or domain-specific aspects already in use is a prerequisite to aspect mining. This can start from known \expndtw-2 crosscutting concerns as, for example, the ones from BEA\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s \expndtw0 WebLogic Aspect framework. The framework, based on \expndtw-2 AspectJ, defines several J2EE pointcuts against which users \expndtw0 can write advices.}\par \pard \plain \cbpat8\qj\li0\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-3\dn0\f1\cchs0\lang1034\fs20 One of the first research activities in identifying crosscut-\expndtw-2 ting concerns in source code was performed by Hannemann \expndtw0 and Kiczales [5]. Their Aspect Mining Tool (AMT) sup-ports both text and type-based analysis. Moreover, it can \expndtw-1 be extended with other types of analysis, such as signature-\expndtw0 based searches. Since each of these analyzes has benefits and drawbacks, AMT has been set up as a \loch\af0\hich\af0\dbch\f1\cchs0 \'93\hich\af0\dbch\af1\loch\f0\cchs0 multi-modal analysis tool\loch\af0\hich\af0\dbch\f1\cchs0 \'94\hich\af0\dbch\af1\loch\f0\cchs0 , permitting the combined use of different \expndtw-2 techniques. Each analysis works as a query, and results in a \expndtw-3 series of matched lines, which are visualized in the system\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s \expndtw0 source code.}\par \pard \plain \cbpat8\qj\li0\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-3\dn0\f1\cchs0\lang1034\fs20 The \loch\af0\hich\af0\dbch\f1\cchs0 \'93\hich\af0\dbch\af1\loch\f0\cchs0 Aspect browser\loch\af0\hich\af0\dbch\f1\cchs0 \'94\hich\af0\dbch\af1\loch\f0\cchs0  tool [4] is based on the assumption \expndtw0 that aspects, defined as secondary design decisions, have a \expndtw-1 signature (textual-pattern, lexical token), which is a textual \expndtw-2 regular expression that will help to their identification. Sim\-\expndtw-3 ilar to the text based analyzes of AMT, the successfulness of \expndtw0 the tool strongly depends on naming conventions fallowed by the analyzed code. The location of the code that imple-\expndtw-2 ments the concerns is represented graphically by views that \expndtw0 are based on the Seesoft concept [3].}\par \pard \plain \cbpat8\qj\li0\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Aspects can be also identified by using dynamic pro-\expndtw-2 gram analysis techniques. This approach is proposed by [1], \expndtw-1 which defines certain classes of aspects together with their \expndtw0 dynamic trace patterns. The mining process searches for these patterns in program traces that were captured during \expndtw-2 execution. The main classes considered are \i outside-aspects\i0 ,}\par \column \pard \plain \cbpat8\qj\li274\fi0\ri10\sb5\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 that is the cali of method \loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 a\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0  is always followed by the cali \expndtw-2 of method \loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 b\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 , and \i inside-aspects, \i0 that is the cali of method \expndtw0\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 b\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0  is always inside a cali of method \loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 a\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 . They also distin-guish subclasses such as \i outside-aspects \i0 that are \i before \i0 or \i\expndtw-3 after \i0 a specific method cali, and \i inside-aspects \i0 that \i arefirst-\i0\expndtw0 or \i last-in \i0 a specific method cali.}\par \pard \plain \cbpat8\qj\li264\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 The research of Rashid and Loughran [8] addresses the question how aspects found in an existing system should be represented. The approaches considered are the \i storing ofthe aspect as an object \i0 (binary/character) together with \expndtw-2 the object\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s description (meta-data) that can be queried, the \i\expndtw0 mapping ofthe aspect anatomy to a dat\loch\af0\hich\af0\dbch\f1\cchs0 \'e1\hich\af0\dbch\af1\loch\f0\cchs0 base model \i0 that \expndtw-1 will allow the storing of aspect\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s properties, and the \i hybrid approach, \i0 a combination ofthe previous two. The mapping of the aspects to a relational dat\loch\af0\hich\af0\dbch\f1\cchs0 \'e1\hich\af0\dbch\af1\loch\f0\cchs0 base model is presented in \expndtw0 more detail in [9].}\par \pard \plain \cbpat8\qj\li264\fi235\ri10\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Aspect mining is used by Zhang and Jacobsen [12] to \expndtw-1 conduct quantitative analysis of the tangling and scattering \expndtw-2 phenomenon in existing legacy implementations of middle-\expndtw-1 ware platforms/architectures (CORBA). New aspects spe\-\expndtw0 cific to the chosen platform and defined as abstractions that crosscut the major architectural components consid\-ered by the authors are reported. These are the dynamic programming model and portable interceptors. The AOP \expndtw-2 based re-factorization of a number of aspects identified was \expndtw0 performed, and the quantified results aim to dem\loch\af0\hich\af0\dbch\f1\cchs0 \'f3\hich\af0\dbch\af1\loch\f0\cchs0 nstrate a reduction of the complexity and improvement of perfor\-\expndtw-1 mances compared to the original implementation. The tool \expndtw-3 used in the analysis, AMTEX\super 4\nosupersub , was built on top ofthe AMT \expndtw0 tool described earlier.}\par \pard \plain \cbpat8\qj\li264\fi240\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 Concern Graphs [11] represent another way to document \expndtw0 and analyze concerns. They are based on localizing an ab-stracted representation of the program elements contribut-ingto the implementation ofthe concern. The structure of a \expndtw-1 concern is stored in a concern graph and, at the same time, \expndtw0 the relationships between the concern\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s elements, such as \expndtw-1 classes, methods and fields are documented. This approach \expndtw-2 is implemented in the tool FEAT. It supports the analysis of \expndtw-1 the dependencies between a concern and the rest ofthe pro\-\expndtw0 gram and allows the viewing of the source code, in a Java \expndtw-2 system, associated to a concern graph element. For concern \expndtw-1 identification, FEAT supports the use of structural queries and integrated lexical searches. The tool displays a concern \expndtw0 graph as a collection of trees with respect to certain con-vention, e.g. the root of each tree is a class that contributes \expndtw-1 to the implementation of the concern. FEAT is also imple\-\expndtw0 mented as an Eclipse plug-in.}\par \pard \plain \cbpat8\qj\li269\fi235\ri10\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 JQuery [6] is another Eclipse plug-in which provides a \expndtw-1 generic browser that allows the user to define logic queries \expndtw-2 in a specific query language. The queries can be run against the source code of a Java working set of interest, and the re\-\expndtw-3 sults can be viewed and browsed. The organization and nav-}\par \pard \plain \cbpat8\ql\li0\fi562\ri1152\sb0\sa0\sl-624\slmult0 \f1\fs20{\b0\i0\ul\cf9\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs18 {\field{\*\fldinst{HYPERLINK "http://www.eecg.utoronto.ca/~czhang/amtex"}}{\fldrslt www.eecg.utoronto.ca/~czhang/amtex }}\ul0\cf1\fs20 2}\par \sect\sectd \sbkpage\pgwsxn12240\pghsxn15840\marglsxn1003\margrsxn1334\margtsxn451\margbsxn1973\cols2\colno1\colw4728\colsr446\colno2\colw4728 \pard \plain \cbpat8\qj\li0\fi0\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 igation of the code can be based on different structural rela-tionships, regular expression matches and complex searches for structural patterns. While JQuery is generally useful, the \expndtw0 authors argue that good navigation support is particularly important when exploring cross cutting concerns.}\par \pard \plain \cbpat8\ql\li0\fi0\ri0\sb264\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs28 3.   Research Questions}\par \pard \plain \cbpat8\qj\li0\fi0\ri0\sb187\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 When looking at the existing work from a reverse engineer-\expndtw0 ing and software exploration perspective, one can see that the knowledge inference step (which \loch\af0\hich\af0\dbch\f1\cchs0 \'93\hich\af0\dbch\af1\loch\f0\cchs0 invents\loch\af0\hich\af0\dbch\f1\cchs0 \'94\hich\af0\dbch\af1\loch\f0\cchs0  the higher levels of abstraction) is underdeveloped: existing aspect \expndtw-1 mining work concentrates on how to distill concern-related \expndtw-2 data from the sources (signatures, lexical pattern matching), \expndtw-3 and how to present such data via, for example, visualization. \expndtw-2 These steps may support the human engineer in aspect min-ing, but are unable to come up with any aspect themselves. \expndtw0 In this section we focus a bit more on the knowledge inference step and explore a number of research directions \expndtw-2 can help to advance the state of the art in aspect mining and \expndtw0 refactoring.}\par \pard \plain \cbpat8\qj\li0\fi0\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Clone Detection \b0 The lack of support for aspects forces \expndtw-2 developers to scatter code over various modules. The actual \expndtw0 code, dealing for example with logging or error handling, is likely to be similar for the various modules. This sug-\expndtw-1 gests that \i clone detection\i0 , a general technique for detecting \expndtw-2 duplicated code, may be beneficial for aspect identification. \expndtw0 This raises the following questions:}\par {\pntext\pard \plain \cbpat8\qj\li398\fi-202\ri10\sb158\sa0\sl-235\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\qj\li398\fi-202\ri10\sb158\sa0\sl-235\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 What specific clone detection techniques are suitable for aspect identification?}\par {\pntext\pard \plain \cbpat8\qj\li398\fi-202\ri5\sb163\sa0\sl-235\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\qj\li398\fi-202\ri5\sb163\sa0\sl-235\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 What error margins (false positive, false negative) do \expndtw-1 we obtain when using clone detection for aspect iden-\expndtw0 tification?}\par {\pntext\pard \plain \cbpat8\qj\li398\fi-202\ri5\sb158\sa0\sl-240\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\qj\li398\fi-202\ri5\sb158\sa0\sl-240\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 How can aspect-specific clone detection be integrated \expndtw0 in software exploration tools?}\par \pard \plain \cbpat8\qj\li0\fi0\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Slicing \b0 Slicing is a program analysis technique aimed at isolating code affecting the value of certain variable only. An interesting research question is how slicing can be best put to use for the isolation candidate aspects from the rest of the code. One issue to address concerns the nature of the slicing techniques needed for aspect isolation. Another \expndtw-1 question that needs to be addressed is how information ob-\expndtw0 tained by traditional slicing techniques can be used for the purpose of aspect identification.}\par \pard \plain \cbpat8\qj\li0\fi0\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Dynamic Analysis \b0 A further technique for finding, e.g., code devoted to logging is to run an instrumented system \expndtw-2 once with logging switched on, and a second time with log-\expndtw0 ging switched off. An analysis of the execution traces will help to find all code devoted to logging, thus delivering a \expndtw-1 first step towards reconstruction of all logging code.}\par \column \pard \plain \cbpat8\qj\li0\fi235\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 This raises questions on domain-specific aspect mining \expndtw-1 techniques, trace analysis techniques, and appropriate code \expndtw0 instrumentation techniques. An initial step towards the use \expndtw-3 of such dynamic analysis is discussed in [1]. However, there \expndtw-1 remain a lot of open issues that need further investigation. \b\expndtw0 Cluster and Concept Analysis \b0 Aspect-oriented pro-gramming is about remodularization. An active area of reverse engineering research is concerned with the use of automated cluster analysis techniques aimed at grouping pieces of functionality (procedures, programs) into coher-ent modules.}\par \pard \plain \cbpat8\qj\li0\fi235\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 AOP deals with those pieces of functionality that are hard (impossible) to modularize well. An interesting ques-tion is how the presence of cross cutting concerns affects automated remodularization attempts.}\par \pard \plain \cbpat8\qj\li0\fi235\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 A potentially more promising route is the use of \i concept \expndtw0 analysis\i0 . Concept analysis shows all possible modulariza-\expndtw-2 tions in a concise \i concept lattice\i0 . Further research is needed \expndtw0 in order to understand how cross cutting concerns would show up in concept lattices. A comparison of cluster and concept analysis is provided in [2].}\par \pard \plain \cbpat8\qj\li0\fi0\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Refactoring \b0 Refactoring involves the systematic catego-\expndtw-2 rization of code smells and elementary program transforma-tions, as well as techniques to automate smell detection and \expndtw0 the refactoring process. In relation to aspect identification \expndtw-1 and migration the following questions arise:}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 How can existing code smells be used to identify can-\expndtw0 didate aspects?}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 How can the introduction of aspects be described in terms of a catalog of new refactorings?}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 What software exploration techniques are needed to support the detection of these aspect-related smells?}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-235\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-235\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 What testing implications does migration to an aspect-\expndtw-1 oriented software development approach bear?}\par \pard \plain \cbpat8\qj\li0\fi0\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Case Studies \b0 Aspect mining research results will have to be validated by means of a series of case studies. To en-sure repeatability of the experiments, the subject systems should be selected from the open source domain. In addi-tion, subject systems from industrial partners interested in aspect identification in their systems can be used to ensure practical applicability of the proposed techniques.}\par \pard \plain \cbpat8\qj\li0\fi235\ri5\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Open questions in this area are how these subject sys-\expndtw-1 tems should be selected (i.e., what selection criteria to use) \expndtw0 and how the mining results can be validated (both tech-niques and criteria). For example, to assess the complete-\expndtw-2 ness of a mining technique, the potential aspects in the sub-ject systems should be known in advance but it\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s highly un-likely that this will be case for any industrial or open source \expndtw0 system.}\par \sect\sectd \sbknone\pgwsxn12240\pghsxn15840\marglsxn1003\margrsxn1334\margtsxn451\margbsxn1973\cols1\colsx60 \pard \plain \cbpat8\ql\li4906\fi0\ri0\sb523\sa0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 3}\par \sect\sectd \sbkpage\pgwsxn12240\pghsxn15840\marglsxn1003\margrsxn1334\margtsxn451\margbsxn1973\cols2\colno1\colw4996\colsr178\colno2\colw4728 \pard \plain \cbpat8\qj\li0\fi0\ri274\sb0\sa0\sl-235\slmult0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Assessing the Value of Aspect Isolation \b0 Mining and \expndtw-1 refactoring aspects is done with a certain goals in mind, for example improving the maintainability of code, or improv-\expndtw0 ing it\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 s comprehensibility or extensibility. Consequently, before actually performing the source code transforma-tion that would isolate certain candidate aspects from the sources and capture them in an aspect-oriented way, one needs to assess the value of that migration with respect to these goals.}\par \pard \plain \cbpat8\qj\li0\fi235\ri274\sb0\sa0\sl-240\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 This need for assessing the value of aspect introduction raises the following questions:}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 How would one go and measure the value of aspect introduction in a system?}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-240\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 What are suitable metrics to measure the effects of as-\expndtw0 pect introduction?}\par {\pntext\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-235\slmult0\tx398 \b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20  \'95\tab}\pard \plain \cbpat8\ql\li398\fi-202\ri0\sb158\sa0\sl-235\slmult0\tx398 \f1\fs20{\*\pn\pnlvlblt\pnstart-1\pnindent202\pnf1{\pntxtb \'95}}\b0\i0\cf1\charscalex100\expndtw0\dn0\loch\af0\hich\af0\dbch\f1\cchs0\lang1034\fs20 {\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 Do aspect-oriented systems need different metrics than \expndtw0\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0 ordinary\loch\af0\hich\af0\dbch\f1\cchs0 \'92\hich\af0\dbch\af1\loch\f0\cchs0  systems?}\par \pard \plain \cbpat8\ql\li0\fi0\ri0\sb269\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs28 4.   Concluding Remarks}\par \pard \plain \cbpat8\qj\li0\fi0\ri269\sb187\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-1\dn0\f1\cchs0\lang1034\fs20 Aspect mining research is concerned with the development \expndtw0 of concepts, principles, methods and tools supporting the \expndtw-2 identification of aspects in object-oriented software systems \expndtw0 as well as the subsequent refactoring of such systems into aspect-oriented systems.}\par \pard \plain \cbpat8\qj\li0\fi235\ri278\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 In this paper, we explored the state of the art in aspect \expndtw-2 mining research, and we identified a series of promising re-\expndtw0 search directions.}\par \pard \plain \cbpat8\qj\li0\fi235\ri274\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Research results can be used to support software devel-\expndtw-2 opment, continuously analyzing a system while it is built in \expndtw0 order to identify (1) code smells requiring aspects; and (2) \expndtw-2 aspect smells requiring (aspect specific) refactorings. More-\expndtw0 over, aspect mining can be used on completed systems, in \expndtw-1 order to offer better support for future evolution of the sys-\expndtw0 tem.}\par \pard \plain \cbpat8\qj\li0\fi235\ri274\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 Additionally, aspects can serve the role of landmarks during the exploration of a software system[10, Chap. 1]. Last but not least, aspect mining research will be useful in \expndtw-1 order to assess the actual value of aspect-oriented develop-\expndtw0 ment.}\par \pard \plain \cbpat8\ql\li0\fi0\ri0\sb264\sa0 \f1\fs20{\i0\b\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs28 References}\par \pard \plain \cbpat8\qj\li427\fi-331\ri269\sb187\sa0\sl-240\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [1] S. Breu and J. Krinke. Aspect mining using dynamic analysis. In \i Workshop on Software-Reengineering\i0 , Bad Honnef, 2003.}\par \pard \plain \cbpat8\qj\li427\fi-331\ri278\sb158\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw-2\dn0\f1\cchs0\lang1034\fs20 [2] A. van Deursen and T. Kuipers. Identifying objects us-ing cluster and concept analysis. In \i Proc. Int. Conf. on \expndtw0 Software Engineering (ICSE)\i0 , pages 246\loch\af0\hich\af0\dbch\f1\cchs0 \'96\hich\af0\dbch\af1\loch\f0\cchs0 255. ACM, 1999.}\par \pard \plain \cbpat8\qr\li0\fi0\ri0\sb451\sa0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 4}\par \column \pard \plain \cbpat8\qj\li432\fi-336\ri0\sb0\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [3] S. G. Eick, J. L. Steffen, and E. E. Sumner. Seesoft \loch\af0\hich\af0\dbch\f1\cchs0 \'96\hich\af0\dbch\af1\loch\f0\cchs0  tool for visualizing line oriented software. \i IEEE Transactions on Software Engineering\i0 , 18(11):957\loch\af0\hich\af0\dbch\f1\cchs0 \'96 \hich\af0\dbch\af1\loch\f0\cchs0 968, November 1992.}\par \pard \plain \cbpat8\qj\li432\fi-336\ri10\sb158\sa0\sl-240\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [4] W. G. Griswold, Y. Kato, and J. J. Yuan. Aspect-\expndtw-3 browser: Tool support for managing dispersed aspects. \expndtw-1 Technical Report CS1999-0640, 3, 2000.}\par \pard \plain \cbpat8\qj\li432\fi-336\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [5] J. Hannemann and G. Kiczales. Overcoming the prevalent decomposition of legacy code. In \i Proc. Workshop on Advanced Separation of Concerns\i0 . IEEE, 2001.}\par \pard \plain \cbpat8\qj\li432\fi-336\ri5\sb158\sa0\sl-240\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [6] D. Janzen and K. De Volder. Navigating and query-ing code without getting lost. In \i Proc. 2nd Int. Conf. on Aspect-Oriented Software Development (AOSD)\i0 , \expndtw-1 pages 178\loch\af0\hich\af0\dbch\f1\cchs0 \'96\hich\af0\dbch\af1\loch\f0\cchs0 187. ACM Press, March 2003.}\par \pard \plain \cbpat8\qj\li432\fi-336\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [7] G. Kiczales, J. Lamping, A. Mendhekar, C. Maeda, C. Lopes, J-M. Loingtier, and J. Irwin. Aspect-oriented programming. In \i 11th Europeen Conf. Object-Oriented Programming\i0 , volume 1241 of \i\expndtw-1 LNCS\i0 , pages 220\loch\af0\hich\af0\dbch\f1\cchs0 \'96\hich\af0\dbch\af1\loch\f0\cchs0 242. Springer Verlag, 1997.}\par \pard \plain \cbpat8\qj\li432\fi-331\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [8] N. Loughran and A. Rashid. Mining aspects. In \i Workshop on Early Aspects: Aspect-Oriented Re-\expndtw-2 quirements Engineering and Architecture Design\i0 , En-schede, The Netherlands, 2002. AOSD Satellite work-\expndtw0 shop.}\par \pard \plain \cbpat8\qj\li432\fi-336\ri5\sb158\sa0\sl-240\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [9] N. Loughran and A. Rashid. Relational database sup-\expndtw-2 port for aspect-oriented programming. In \i Proceedings \expndtw-3 of NetObjectDays Conference\i0 , number 2591 in LNCS, \expndtw0 pages 233\loch\af0\hich\af0\dbch\f1\cchs0 \'96\hich\af0\dbch\af1\loch\f0\cchs0 247, 2002.}\par \pard \plain \cbpat8\qj\li432\fi-432\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [10] L. Moonen. \i Exploring Software Systems\i0 . PhD thesis, Faculty of Natural Sciences, Mathematics, and Com-puter Science, University of Amsterdam, December 2002.}\par \pard \plain \cbpat8\qj\li432\fi-432\ri5\sb158\sa0\sl-240\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [11] M. P. Robillard and G. C. Murphy. Concern graphs: Finding and describing concerns. In \i Proc. Int. Conf. on Software Engineering (ICSE)\i0 . IEEE, 2002.}\par \pard \plain \cbpat8\qj\li432\fi-432\ri5\sb158\sa0\sl-235\slmult0 \f1\fs20{\b0\i0\cf1\charscalex100\expndtw0\dn0\f1\cchs0\lang1034\fs20 [12] C. Zhang and H-A. Jacobsen. Quantifying aspects in middleware platforms. In \i Proc. 2nd Int. Conf. on Aspect-Oriented Software Development (AOSD)\i0 , \expndtw-1 pages 130\loch\af0\hich\af0\dbch\f1\cchs0 \'96\hich\af0\dbch\af1\loch\f0\cchs0 139. ACM Press, March 2003.}\par }